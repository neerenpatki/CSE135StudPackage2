{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340

\f0\fs30 \cf0 Logs for experimentation with programs/queries:
\f1\fs24 \
\pard\pardeftab720\sl280

\f0\fs26 \cf0 Basic JSP: 
\f1\fs24 \

\f0\fs26 We created a basic JSP that produces about: 
\f1\fs24 \

\f0\fs26 1 query to get 10 Product \'a0name list
\f1\fs24 \

\f0\fs26 1 query each to get the total amount for each product (10 queries)
\f1\fs24 \

\f0\fs26 1 query to get 20 customers list
\f1\fs24 \

\f0\fs26 1 query each customer to get the total spent by each customer (20 queries)
\f1\fs24 \

\f0\fs26 and 1 query for each cell that displays the total amount spent by a customer on a certain product (20 customers/states x 10 products).
\f1\fs24 \

\f0\fs26 This sums up to about 1+10+1+20+(10x20) = ~232 queries
\f1\fs24 \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720\sl280

\f0\fs26 \cf0 With this JSP, we ran it with the following data: 10000 customers, 200 products, 20 categories, and 100,000 sales. it took about 10s to load a page of information. This is a long time, which is to be expected, given our inefficient implementation. Each page would need to query all the customers, products, and categories to have it ready for display. With a medium sized database, this can take quite a while because we have lots of queries for each section of information we want (i.e products, customers/states, and individual customer to product information. \'a0
\f1\fs24 \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720\sl340

\f0\fs30 \cf0 Advanced JSP:
\f1\fs24 \

\f0\fs30 With our next implementation, we minimized the number of queries we used to obtain the necessary data. We went from 10 queries to get the products information to 1 query, from 20 queries to get customer information to 1 query, from ~10x20 queries to obtain each cell\'92s information to 1 query to obtain all the cell information.
\f1\fs24 \

\f0\fs30 With this implementation on the following data: 
\fs26 10000 customers, 200 products, 20 categories, and 100,000 sales, it took about 2s to load each page. This is a significant decrease in time taken, which is to be expected because of how much we reduced the number of queries (from ~200 queries to 3 queries).
\f1\fs24 \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720\sl340

\f0\fs30 \cf0 We then increased the database size to: 10,000 users, 10,000 categories, 100,000 products, and 1,000,000 sales. With a bigger data size, as such, it takes ~20s to load the table with our 3 queries implementation. This is a long time to be waiting. This is because we are getting ALL the products, ALL the customers/states, and calculating ALL the individual cells value on a page. But we only want the values for 10 products, 20 customers, and 10x20 cell information. We are doing ALL the work on each page when we only want only a fraction of the information to be displayed. Basically we are calculating and extracting information from the database that we don\'92t necessarily need right away. Therefore, this implementation is still not the most optimal for what we want to do.
\f1\fs24 \
\pard\pardeftab720
\cf0 \
\pard\pardeftab720

\f0\fs30 \cf0 Our next implementation optimizes our queries. We still have 3 queries, 1 for each section of information (customers/states, products, and individual sales data). How we optimized it was by limiting the amount of data we are calculating each page. Since we only want 10 products displaying in one page, we only calculate the first 10 products from the result set. Likewise, we only calculate the first 20 customers/states and only 10x20 individual sales data. Instead of calculating ALL the products (100,000 in this case) each page, we calculate only 10 products each page. This is a significant decrease in the information being calculated. With this implementation, it takes about 12s to load up a page of information. And it takes about .5s to load up small/medium data (
\fs26 10000 customers, 200 products, 20 categories, and 100,000 sales)\
\
\pard\pardeftab720\sl340

\fs30 \cf0 Notes on Implementaton:
\f1\fs24 \
\pard\pardeftab720

\f0\fs30 \cf0 We first structured our solution around multiple join queries, where we join tables on conditions that would produce a result set we can use to populate our table. \'a0While we were able to optimize our JSP through optimizing our logic, we realized due to the flow of the query plan and physical plan that our implementation would not be able to be optimized through the use of indices. \'a0Our solution is a working solution, but we decided to experiment with temporary tables. \'a0Using temporary tables optimizes the query plan and physical plan to give a result that will be affected by indices, and therefore can achieve even further optimization. \'a0This difference is shown in experiment 7 of our experiment log for index choices.}